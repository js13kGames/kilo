package token

import (
	"github.com/js13kgames/kilo/server/types/eid"
)

const (
	SizeBinary  = 24
	SizeEncoded = 32
)

var (
	zero Token
)

type Token [SizeBinary]byte

type TokenMetadata struct {
	ActorId eid.ID `json:"actorId"`
}

func Zero() Token {
	return zero
}

func (t Token) MarshalText() ([]byte, error) {
	b := make([]byte, SizeEncoded)
	t.encode(b)
	return b, nil
}

func (t *Token) UnmarshalText(src []byte) error {
	if len(src) != SizeEncoded {
		return errInvalidInput
	}

	// Note: Not checking character validity here as invalid tokens would never get generated by a Store -
	// and we hit the Store to check their existence (by extension - validity) anyways.
	//
	// In practice checking each character adds an overhead of about 30% to the decoding step, penalizing
	// all valid requests, where malicious requests can simply provide valid base64 characters and tax
	// the store instead to generate more load (and get a chance of hitting an existing token as well).
	//
	// 	for _, c := range src {
	//		if dec[c] == 0xFF {
	//			return errInvalidInput
	//		}
	//	}

	t.decode(src)
	return nil
}

func (t Token) MarshalJSON() ([]byte, error) {
	b := make([]byte, SizeEncoded+2)
	t.encode(b[1 : SizeEncoded+1])
	b[0], b[SizeEncoded+1] = '"', '"'

	return b, nil
}

func (t *Token) UnmarshalJSON(src []byte) error {
	// Duplicates the check in UnmarshalText but also gives us a boundary check
	// to see if we got 'null' without casting it to a string or doing pointer juggling.
	// The case of 4 covers 'null'.
	n := len(src)
	if n != SizeEncoded+2 && n != 4 {
		return errInvalidInput
	}

	// Note: For an unknown (to me - alcore) reason when running with...
	//
	// s := string(src)
	// if s == "null" {
	//		*t = zero
	//		return nil
	// }
	//
	// Go (1.12) in the bench would actually allocate, despite s never escaping
	// the function. Thus the simple unroll.
	if src[0] == 'n' && src[1] == 'u' && src[2] == 'l' && src[3] == 'l' {
		*t = zero
		return nil
	}

	return t.UnmarshalText(src[1 : n-1])
}

func (t Token) IsZero() bool {
	return t == zero
}
